{
  "tests": [
    {
      "name": "reverse(@)",
      "selector" : "$[?reverse(@)=='cba']",
      "document" : ["abc", "cba"],
      "result": ["abc"]
    },
    {
      "name": "reverse(reverse(@))",
      "selector" : "$[?reverse(reverse(@))=='cba']",
      "document" : ["abc", "cba"],
      "result": ["cba"]
    },
    {
      "name": "count(siblings(@))",
      "selector" : "$..[?count(siblings(@)) == 1]",
      "document" : {"a":  {"b":  "x", "d":  "x"}},
      "result": ["x", "x"]
    },
    {
      "name": "is_object(@)",
      "selector" : "$[?is_object(@)]",
      "document" : [1, true, {}, [42], "foo", {"a": "b"}],
      "result": [{}, {"a": "b"}]
    },
    {
      "name": "is_array(@)",
      "selector" : "$[?is_array(@)]",
      "document" : [1, true, {}, [42], "foo", {"a": "b"}],
      "result": [[42]]
    },
    {
      "name": "is_string",
      "selector" : "$[?is_string(@)]",
      "document" : [1, true, {}, [42], "foo", {"a": "b"}],
      "result": ["foo"]
    },
    {
      "name": "is_number",
      "selector" : "$[?is_number(@)]",
      "document" : [1, true, {}, [42], 3.14, "foo", {"a": "b"}],
      "result": [1, 3.14]
    },
    {
      "name": "is_boolean",
      "selector" : "$[?is_boolean(@)]",
      "document" : [1, true, {}, [42], "foo", {"a": "b"}, false],
      "result": [true, false]
    },
    {
      "name": "parens in functional args",
      "selector" : "$[?xor((@.b), (@.a))]",
      "document" : [{"a": 0}, {"a": 0, "b": 0}, {"b": 0}, {}],
      "result": [{"a": 0}, {"b": 0}]
    },
    {
      "name": "functions, length, non-singular query arg",
      "selector": "$[?length(@.*)<3]",
      "invalid_selector": true
    },
    {
      "name": "functions, length, arg is a function expression",
      "selector": "$.values[?length(@.a)==length(value($..c))]",
      "document": {
        "c": "cd",
        "values": [
          {
            "a": "ab"
          },
          {
            "a": "d"
          }
        ]
      },
      "result": [
        {
          "a": "ab"
        }
      ]
    }, {
      "name": "functions, match, arg is a function expression",
      "selector": "$.values[?match(@.a, value($..['regex']))]",
      "document": {
        "regex": "a.*",
        "values": [
          {
            "a": "ab"
          },
          {
            "a": "ba"
          }
        ]
      },
      "result": [
        {
          "a": "ab"
        }
      ]
    },
    {
      "name": "functions, search, arg is a function expression",
      "selector": "$.values[?search(@, value($..['regex']))]",
      "document": {
        "regex": "b.?b",
        "values": [
          "abc",
          "bcd",
          "bab",
          "bba",
          "bbab",
          "b",
          true,
          [],
          {}
        ]
      },
      "result": [
        "bab",
        "bba",
        "bbab"
      ]
    }

  ]
}